Create AWS Account
Create Key Pairs  
    name "project3"  RSA  .pem Private key file format
Create Security Groups
    Security group name "WebServerSG2"
          Description: for Project3 B-safe 002
          Inbound rule SSH type, 22 Port range, local IP/32 (67.150.64.169/32) source
                       Custom TCP type, 8080 Port range, local IP/32 (67.150.64.169/32) source
                       HTTP type, 80 port range,  local IP/32 (67.150.64.169/32) source
                       
Create EC2 Instance   Name: Project3
                      Application: Ubuntu
                      key pair: "Project3"
                      Network settings: Select existing security group "WebServerSG2"
                      
Create.  wait till instance state as Running. 


Download X Server 

Import project3 instance using X server SSH

Go to Session Choose SSH   
     Romote host: public IP created from AWS EC2 project3 instance (54.67.25.181)
     Check Specifiy username: Ubuntu
Go to Advanced SSH setting  --> check use private key and browse for project3.pem file     
Then SSH Session to ubuntu@54.67.25.181 should be created.


Install Jenkin in instance 
Download Java 11 runtime Environment
   sudo apt-get update
   sudo apt-get install openjdk-11-jdk
   java -version (make sure openjdk version 11 was installed)
   
Downlaoding and installing the jenkins app
  wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
  sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list' 
  sudo apt-get update
  sudo apt-get install jenkins
  sudo service jenkins status (make sure it's active running)
  Sudo systemctl start jenkins 
  install suggested plugins
  skip and continue as admin
  Start using Jenkins
  
  then go to web browser open localhost:8080 (54.67.25.181:8080) login to jenkin page 
  to unlock Jenkins at terminal input
  sudo cat /var/lib/jenkins/secrets/initialAdminPassword
  copy the password and paste it on jenkins page in the browser.
  
Install Docker
  sudo apt-get update 
  sudo apt-get install \
  apt-transport-https \
  ca-certificates \
  curl \
  gnupg \
  lsb-release

  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  
  echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt  install docker.io
  
  Create a file for Project3 name: "B-safe"
  
    mkdir B-safe
    cd B-safe
    
 Create Dockerfile using Spring Boot 
      Dockerfile
  vi Dockerfile
"
FROM eclipse-temurin:17-jdk-alpine
VOLUME /tmp
ARG JAR_FILE
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["java","-jar","/app.jar"]
"

Executing the file 
  sudo docker build .
  
 Check Docker Image
   sudo docker images
 
 Create my private repository and push Docker image into the repository (using docker hub)
   Create Repository name project3 (private)
   
   
Back to instance
  sudo docker login
  
  Tag the Spring boot image as Project3 Tag: B-safe
    sudo docker tag 3d4243cd3984 project3:B-safe
    
 Push image into my private repository in dockerhub
 
 Expose the application on the respective ports so that the user can access the deployed application
 
 sudo docker run -p 80:8080 images name
  
   
  

